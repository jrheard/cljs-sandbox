2/13/16

ok, let's try doing a little perf demo/test to see how svg+reagent stuff works

ok uh let's try doing just a few squares that bounce around the screen

drawing pretty squares was pretty easy, haven't started making them bounce yet

=====

2/14/16

the performance on animating these squares hasn't been completely great - time to
add some console.logs to see if we're redrawing every square whenever one of them moves

=====

2/15/16

quick braindump
i want to understand why the mortgage UI has such bad performance, seems like the entire graph
is redrawn whenever a bar is highlighted
things i plan to do related to this problem:
* read reagent source code
* read react source code / API
* get rid of mouseover/mouseout event handlers in mortgage demo, see if performance/behavior is at all affected;
  just have some anonymous go-block toggle a bar selected/unselected every 2 seconds or whatever
* for curiosity's sake, build a demo (partially implemented atm) in cljs-sandbox that tests framerate of a bunch
  of moving squares bouncing around the screen
* implement some way of detecting+displaying framerate, per above

(mainly interested in performance of svg to see if i can use it for boi, and also just out of curiosity at this point)

====

2/16/16

ok crap i gotta learn about dot products and shit
currently i'm focused on figuring out how to get these boxes to bounce off walls correctly
relevant links:
https://stackoverflow.com/questions/573084/how-to-calculate-bounce-angle
https://en.wikipedia.org/wiki/Dot_product
https://gamedev.stackexchange.com/questions/23672/determine-resulting-angle-of-wall-collision
https://www.safaribooksonline.com/library/view/html5-canvas/9781449308032/ch05s02.html ********<--------

you know what, let's set aside this box demo for a bit and try making a minimal reproduction
of the perf issue i'm seeing on the mortgage thing.

start with a program that emits a few <p> tags or whatever, and verify that the only one that gets redrawn
is the one that's changed. then try the same thing with svg and <rect> tags.

ok, i did that and it really looks like only the relevant <p> and <rect> are recalculated+redrawn. what gives?
back to the mortgage repo, where i probably should have kept all this...

ok i was able to fix the mortgage draw-all-bars issue, but the perf there is still bad. o well
might come back to this later, reimplement the mortgage ui from scratch

====

2/17/16

reading through the docs on react before i start poring through reagent's source.
currently on https://facebook.github.io/react/docs/thinking-in-react.html

seems like react is primarily a library for expressing composable UI components that are defined in terms of
`this.props` and `this.state`, where `this.props` is static data passed in at initialization time, and `this.state`
is dynamic data that's a result of user behavior/interaction (eg adding a comment, clicking "refresh", whatever) -
and the main thing that react buys you is that whenever a component's `this.state` changes, the DOM will automatically +
performantly be updated to reflect that state change. so your JS code's state and your UI never fall out of sync
with one another.

they do this by making you use a this.setState() function, which presumably triggers all the efficient dom-diffing-etc
recalculation/redrawing of components and their children whenever their state changes.

unrelated, stumbled across this quote in https://etscrivner.github.io/posts/2014/10/building-large-flask-apps-in-the-real-world/
"""Organize by principle of least suprise. Ask yourself, "How would I organize this so that someone using Notepad
with a good grasp on the programming language would be able to find and edit any arbitrary component?""""

back to react - in https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html there's this extended treatise
on the difference between this.state and this.props

https://facebook.github.io/react/docs/multiple-components.html
"As discussed earlier, a component cannot mutate its props â€” they are always consistent with what its owner sets them to.
This fundamental invariant leads to UIs that are guaranteed to be consistent."

https://facebook.github.io/react/docs/reusable-components.html describes a way to enforce type constraints on your this.props -
primarily described as useful for when you're writing general reusable components (button or whatever) and want to make sure
that they're always used in the right way. neat!

looking forward to reading https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle , it's the
main article i was looking for, i wanted to know what the hell is up with didMount, willMount, etc etc

i wonder what reagent source will look like? also, what's a reaction?
i'd guess that (r/atom) adds a watch function to the returned atom, which calls this.setState() on something-or-other
i wonder how reagent uses props vs state?

ok, i was worried that there'd be a ton of will/did mount/etc terminology to learn, but the above component-lifecycle
link is really pretty straightforward.

...and that's it! reading these docs was easier than i thought, neat.

https://facebook.github.io/react/docs/animation.html - "an easy way to perform CSS transitions and animations
when a React component enters or leaves the DOM"

***** eep, here's an interesting tidbit from https://groups.google.com/forum/#!topic/reactjs/lZDjMmlTHOs
"The `key` attribute is similar as an `id` but it *doesn't have to be globally unique*. It must only be unique
among its siblings. Since `id` is already an existing concept in the DOM, we couldn't re-use the same name so we opted for `key`."
wasn't sure til now re: whether or not keys had to be globally unique, good to know.

======

2/18/16

setState() documented in https://facebook.github.io/react/docs/component-api.html
lol basically all of the methods documented on that page are deprecated / will be removed soon
interesting notes in isMounted() https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html

https://facebook.github.io/react/docs/component-specs.html has notes on why render() should be pure

writeup on their core abstraction and how they implemented it performantly at https://facebook.github.io/react/docs/reconciliation.html
****super super good article, goes into more depth about why the `key` thing is necessary

ok that's about it for the react docs' appendices!

let's see if i get anything out of reading through https://github.com/clojure/clojurescript/wiki/Quick-Start carefully
not much new, but it does have a section at the bottom that explains cljsjs

TODO - consider using a cljsjs package to generate charts in mortgage.git instead of doing them by hand

next up: read through reagent source code finally; still need to figure out what a reaction is
notes:

src/reagent/impl/component.cljs:custom-wrapper is interesting, seems to be .. hell, i don't know what it does. but it looks relevant.
hm, what's :cljsState? seems relevant
****src/reagent/dom.cljs:render is the entry point
dom.cljs has a private `roots` atom, which maps DOM nodes to [component dom-node] tuples, and is how reagent keeps track of
  what components have been mounted and where
template.cljs:as-element is where hiccup forms are turned into react elements (how does this differ from a component?)
  relies heavily on vec-to-elem - that function's support for tags like :div.bar>a.foo is interesting

ok, Reaction is a type that's specified in src/reagent/ratom.cljs . so what does it mean?
jesus, this with-let macro is scary
how does RAtom relate to Reaction?
and what's a Track?
and an RCursor?
ok, track and track! are documented in core.cljs
RCursor is documented there too
ok so really i should just read through core.cljs and its docstrings first

hrm, i note that "reaction" is not mentioned in core.cljs at all

lol i have no idea how ratoms work
really having trouble tracing the IDeref rabbit hole
doesn't seem like there's anything going on here, but there must be something!

god i guess i need to read the fucking re-frame manifesto

nvm ok it looks like i was looking in the wrong place this whole time maybe?
in component.js:static-fns, (ratom/run-in-reaction) is invoked
this might be the entry point re: reactivity

okokokokok
so reagent components all have a :render function that does all of its work in a (ratom/run-in-reaction) block
and what that basically does is set up a new Reaction, bind *ratom-context* to it, and then "render" the component
(which i think basically just means, like, call it and expand it out so it's a big tree of nested hiccup-style vectors).
so while that render process is happening - while the functions that calculate your UI are being evaluated -
whenever a RAtom is deref'd, `notify-deref-watcher!` is called, and that RAtom instance is stuffed into the Reaction's .-captured
list.

i sort of lose the thread of things after this point, though.
i guess that all initializes the reaction? so what happens when someone updates a watched RAtom?
ok my current hunch is that the Reaction must have a bunch of watches, one for each relevant RAtom. where would that happen?
in deref-capture, which is run at reaction initialization time, the reagent component is rendered/evaluated, and all of the
RAtoms that were deref'd in the process are stuffed onto the Reaction's .-captured list, as per above.
*after* that, ._update-watching is called on the Reaction.
ok so for each deref'd RAtom, the Reaction sets up a watch; whenever any of those RAtoms is changed, `handle-reaction-change`
  is (somehow) invoked.
there's some trickery after this, some vaguely tangled stuff going on between ratom.cljs and batching.cljs
flush! is involved
it all ends up bottoming out in _run though

ok so you create a reagent component via the library's interface by basically just passing in a function that returns
a vector of vectors, and (very probably) derefs some RAtoms on the way. while setting up your component, reagent creates a Reaction,
then evaluates/"renders" your function and keeps track of any RAtoms that were deref'd. it adds watches to each of those atoms,
such that from now on whenever any of those atoms changes, the Reaction's ._run method is called.
this reevaluates/rerenders your original function. okokokokok there were a lot of hops to get there, but that's how
things are wired up.

so next question: how does performance work? where does the code live that makes sure that eg if you have a function
that returns a list of lists like [draw-thing foo bar], and `foo` and `bar` are the same as they were before, that
(draw-thing foo bar) isn't rendered/evaluated?

so the function that gets called whenever a reaction changes is component.cljs:wrap-render

dissasocciated notes below
vec-to-elem is called somewhere
as part of its execution it calls reag-element
which calls component/as-class
which calls fn-to-class
which calls create-class *on the given function's METADATA map*
which calls cljsify
which calls wrap-funs
which stuffs :reagentRender into the passed-around metadata map

and *that's* how :reagentRender is available when wrap-render is called. i think.

it seems like at a certain point in this class-creation chain the original function is discarded and
you just start dealing with the metadata map, and that's what a reagent class is?

ok at this point i'm tempted to give up. i have a good handle on how reagent is able to find out that RAtoms have
changed, and that it does *something* whenever they're changed. but i don't yet completely understand how performance works.
i know that :shouldComponentUpdate must be involved, but can't figure out how exactly it fits into the whole picture.
and my head is hurting. so i am going to take a break.

TODO look up how watches work, IWatchable, etc etc

