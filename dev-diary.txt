2/13/16

ok, let's try doing a little perf demo/test to see how svg+reagent stuff works

ok uh let's try doing just a few squares that bounce around the screen

drawing pretty squares was pretty easy, haven't started making them bounce yet

=====

2/14/16

the performance on animating these squares hasn't been completely great - time to
add some console.logs to see if we're redrawing every square whenever one of them moves

=====

2/15/16

quick braindump
i want to understand why the mortgage UI has such bad performance, seems like the entire graph
is redrawn whenever a bar is highlighted
things i plan to do related to this problem:
* read reagent source code
* read react source code / API
* get rid of mouseover/mouseout event handlers in mortgage demo, see if performance/behavior is at all affected;
  just have some anonymous go-block toggle a bar selected/unselected every 2 seconds or whatever
* for curiosity's sake, build a demo (partially implemented atm) in cljs-sandbox that tests framerate of a bunch
  of moving squares bouncing around the screen
* implement some way of detecting+displaying framerate, per above

(mainly interested in performance of svg to see if i can use it for boi, and also just out of curiosity at this point)

====

2/16/16

ok crap i gotta learn about dot products and shit
currently i'm focused on figuring out how to get these boxes to bounce off walls correctly
relevant links:
https://stackoverflow.com/questions/573084/how-to-calculate-bounce-angle
https://en.wikipedia.org/wiki/Dot_product
https://gamedev.stackexchange.com/questions/23672/determine-resulting-angle-of-wall-collision
https://www.safaribooksonline.com/library/view/html5-canvas/9781449308032/ch05s02.html ********<--------

you know what, let's set aside this box demo for a bit and try making a minimal reproduction
of the perf issue i'm seeing on the mortgage thing.

start with a program that emits a few <p> tags or whatever, and verify that the only one that gets redrawn
is the one that's changed. then try the same thing with svg and <rect> tags.

ok, i did that and it really looks like only the relevant <p> and <rect> are recalculated+redrawn. what gives?
back to the mortgage repo, where i probably should have kept all this...

ok i was able to fix the mortgage draw-all-bars issue, but the perf there is still bad. o well
might come back to this later, reimplement the mortgage ui from scratch

====

2/17/16

reading through the docs on react before i start poring through reagent's source.
currently on https://facebook.github.io/react/docs/thinking-in-react.html

seems like react is primarily a library for expressing composable UI components that are defined in terms of
`this.props` and `this.state`, where `this.props` is static data passed in at initialization time, and `this.state`
is dynamic data that's a result of user behavior/interaction (eg adding a comment, clicking "refresh", whatever) -
and the main thing that react buys you is that whenever a component's `this.state` changes, the DOM will automatically +
performantly be updated to reflect that state change. so your JS code's state and your UI never fall out of sync
with one another.

they do this by making you use a this.setState() function, which presumably triggers all the efficient dom-diffing-etc
recalculation/redrawing of components and their children whenever their state changes.

unrelated, stumbled across this quote in https://etscrivner.github.io/posts/2014/10/building-large-flask-apps-in-the-real-world/
"""Organize by principle of least suprise. Ask yourself, "How would I organize this so that someone using Notepad
with a good grasp on the programming language would be able to find and edit any arbitrary component?""""

back to react - in https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html there's this extended treatise
on the difference between this.state and this.props

https://facebook.github.io/react/docs/multiple-components.html
"As discussed earlier, a component cannot mutate its props — they are always consistent with what its owner sets them to.
This fundamental invariant leads to UIs that are guaranteed to be consistent."

https://facebook.github.io/react/docs/reusable-components.html describes a way to enforce type constraints on your this.props -
primarily described as useful for when you're writing general reusable components (button or whatever) and want to make sure
that they're always used in the right way. neat!

looking forward to reading https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle , it's the
main article i was looking for, i wanted to know what the hell is up with didMount, willMount, etc etc

i wonder what reagent source will look like? also, what's a reaction?
i'd guess that (r/atom) adds a watch function to the returned atom, which calls this.setState() on something-or-other
i wonder how reagent uses props vs state?

ok, i was worried that there'd be a ton of will/did mount/etc terminology to learn, but the above component-lifecycle
link is really pretty straightforward.

...and that's it! reading these docs was easier than i thought, neat.

https://facebook.github.io/react/docs/animation.html - "an easy way to perform CSS transitions and animations
when a React component enters or leaves the DOM"

***** eep, here's an interesting tidbit from https://groups.google.com/forum/#!topic/reactjs/lZDjMmlTHOs
"The `key` attribute is similar as an `id` but it *doesn't have to be globally unique*. It must only be unique
among its siblings. Since `id` is already an existing concept in the DOM, we couldn't re-use the same name so we opted for `key`."
wasn't sure til now re: whether or not keys had to be globally unique, good to know.

======

2/18/16

setState() documented in https://facebook.github.io/react/docs/component-api.html
lol basically all of the methods documented on that page are deprecated / will be removed soon
interesting notes in isMounted() https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html

https://facebook.github.io/react/docs/component-specs.html has notes on why render() should be pure

writeup on their core abstraction and how they implemented it performantly at https://facebook.github.io/react/docs/reconciliation.html
****super super good article, goes into more depth about why the `key` thing is necessary

ok that's about it for the react docs' appendices!

let's see if i get anything out of reading through https://github.com/clojure/clojurescript/wiki/Quick-Start carefully
not much new, but it does have a section at the bottom that explains cljsjs

TODO - consider using a cljsjs package to generate charts in mortgage.git instead of doing them by hand

next up: read through reagent source code finally; still need to figure out what a reaction is
notes:

src/reagent/impl/component.cljs:custom-wrapper is interesting, seems to be .. hell, i don't know what it does. but it looks relevant.
hm, what's :cljsState? seems relevant
****src/reagent/dom.cljs:render is the entry point
dom.cljs has a private `roots` atom, which maps DOM nodes to [component dom-node] tuples, and is how reagent keeps track of
  what components have been mounted and where
template.cljs:as-element is where hiccup forms are turned into react elements (how does this differ from a component?)
  relies heavily on vec-to-elem - that function's support for tags like :div.bar>a.foo is interesting

ok, Reaction is a type that's specified in src/reagent/ratom.cljs . so what does it mean?
jesus, this with-let macro is scary
how does RAtom relate to Reaction?
and what's a Track?
and an RCursor?
ok, track and track! are documented in core.cljs
RCursor is documented there too
ok so really i should just read through core.cljs and its docstrings first

hrm, i note that "reaction" is not mentioned in core.cljs at all

lol i have no idea how ratoms work
really having trouble tracing the IDeref rabbit hole
doesn't seem like there's anything going on here, but there must be something!

god i guess i need to read the fucking re-frame manifesto

nvm ok it looks like i was looking in the wrong place this whole time maybe?
in component.js:static-fns, (ratom/run-in-reaction) is invoked
this might be the entry point re: reactivity

okokokokok
so reagent components all have a :render function that does all of its work in a (ratom/run-in-reaction) block
and what that basically does is set up a new Reaction, bind *ratom-context* to it, and then "render" the component
(which i think basically just means, like, call it and expand it out so it's a big tree of nested hiccup-style vectors).
so while that render process is happening - while the functions that calculate your UI are being evaluated -
whenever a RAtom is deref'd, `notify-deref-watcher!` is called, and that RAtom instance is stuffed into the Reaction's .-captured
list.

i sort of lose the thread of things after this point, though.
i guess that all initializes the reaction? so what happens when someone updates a watched RAtom?
ok my current hunch is that the Reaction must have a bunch of watches, one for each relevant RAtom. where would that happen?
in deref-capture, which is run at reaction initialization time, the reagent component is rendered/evaluated, and all of the
RAtoms that were deref'd in the process are stuffed onto the Reaction's .-captured list, as per above.
*after* that, ._update-watching is called on the Reaction.
ok so for each deref'd RAtom, the Reaction sets up a watch; whenever any of those RAtoms is changed, `handle-reaction-change`
  is (somehow) invoked.
there's some trickery after this, some vaguely tangled stuff going on between ratom.cljs and batching.cljs
flush! is involved
it all ends up bottoming out in _run though

ok so you create a reagent component via the library's interface by basically just passing in a function that returns
a vector of vectors, and (very probably) derefs some RAtoms on the way. while setting up your component, reagent creates a Reaction,
then evaluates/"renders" your function and keeps track of any RAtoms that were deref'd. it adds watches to each of those atoms,
such that from now on whenever any of those atoms changes, the Reaction's ._run method is called.
this reevaluates/rerenders your original function. okokokokok there were a lot of hops to get there, but that's how
things are wired up.

so next question: how does performance work? where does the code live that makes sure that eg if you have a function
that returns a list of lists like [draw-thing foo bar], and `foo` and `bar` are the same as they were before, that
(draw-thing foo bar) isn't rendered/evaluated?

so the function that gets called whenever a reaction changes is component.cljs:wrap-render

dissasocciated notes below
vec-to-elem is called somewhere
as part of its execution it calls reag-element
which calls component/as-class
which calls fn-to-class
which calls create-class *on the given function's METADATA map*
which calls cljsify
which calls wrap-funs
which stuffs :reagentRender into the passed-around metadata map

and *that's* how :reagentRender is available when wrap-render is called. i think.

it seems like at a certain point in this class-creation chain the original function is discarded and
you just start dealing with the metadata map, and that's what a reagent class is?

ok at this point i'm tempted to give up. i have a good handle on how reagent is able to find out that RAtoms have
changed, and that it does *something* whenever they're changed. but i don't yet completely understand how performance works.
i know that :shouldComponentUpdate must be involved, but can't figure out how exactly it fits into the whole picture.
and my head is hurting. so i am going to take a break.

ok so reactions+ratoms are how reagent keeps track of state and knows to update things.
but so what happens when a reaction is re-run?
and how does the underlying react framework fit into all this?
react's .setState() must be invoked at *some* point, right? <<------ TODO SOLVE

i wish there were more documentation on what a "reagent component" is, and how it differs from a react component,
and how the one is transformed into the other. can't help but feel like schema would be very useful here.

so is it the case that the Reaction has a watch put on *it*? like, something else is watching the Reaction, and when it's _run,
that other thing is updated?

pausing for now to read some other stuff, note to self: current mystery is, where/when does react's setState get called

https://reagent-project.github.io/news/reagent-is-async.html appears to describe the batching portion of the library
"""The downside to async rendering is that you can no longer depend on changes to atoms being immediately available in the DOM.
(Actually, you couldn’t before either, since React.js itself does batching inside event handlers.)
This may make testing a bit more verbose: you now have to call reagent.core/flush to force Reagent to synchronize state with the DOM."""

TODO - for mortgage, try several atoms instead of one; can also create the input-chan on initialization

https://reagent-project.github.io/news/news050.html describes cursors, also wrap
"The result from wrap is just a simple and light-weight value, that happens to look like an atom – it doesn’t by itself
trigger any re-renderings like reagent.core/atom does. That means that it is probably only useful to pass from one
component to another, and that the callback function in the end must cause a ”real” atom to change."

TODO - figure out if i should be using wrap ever
TODO or should i be using cursors? should ask in slack

======

2/19/16

https://reagent-project.github.io/news/news060-alpha.html explains how track can help performance

copy-pasting some notes in made in the #reagent slack channel:

at this point i understand how RAtoms work, like how they're able to notify the reagent system
  (via their parent Reaction instance) that their state has changed, and that the root component
  should be recalculated - but i haven't yet figured out, like, what happens next
in particular i haven't been able to find anything that looks like a react setState call, which
  i'd imagine has got to be somewhere in there
i haven't used react before, but i read through the docs a couple days ago and it looked like
  setState was the specific way that you communicate updates to the framework
anyway i'm gonna keep readin'
hrm. from the om post - "Thus we don't need React operations like setState, which exists to support
  both efficient subtree updating as well as good object-oriented style. Subtree updating for
  Om starting from root is always lightning fast because we're just doing reference equality checks all the way down."
re: my early setstate puzzling, so maybe reagent doesn't have setstate either? i don't understand how anything works without it though
(via https://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/ )
post goes on to say that "we always re-render from the root" - again, this is om, but that matches what i saw in reagent source
ok i think it bottoms out in the forceUpdate call in batching.cljs

https://groups.google.com/forum/#!topic/reagent-project/FdGtS47QAGw is a good one

********
from mikethompson:
@jrheard:  Reagent does not re-render from the root each time.   there are various tutorials at the bottom of
this page which will should give you a clean mental model:  https://github.com/Day8/re-frame/wiki
(warning: clean mental models sometimes differ in details from what the code actually does, so
certainly reading the reagent code is more accurate  :-))
********

great links at the bottom of that wiki page.

in the form-2 example in https://github.com/Day8/re-frame/wiki/Creating%20Reagent%20Components ,
i don't understand why you don't end up with a jillion setTimeouts all incrementing the same atom
[some time later] oh right, setTimeout != setInterval, gotcha

https://github.com/Day8/re-frame/wiki/Using-%5B%5D-instead-of-%28%29 has good notes on () vs []

https://github.com/Day8/re-frame/wiki/When-do-components-update%3F is gold

After a Component's renderer runs and produces hiccup, Reagent interprets it. When it processes the output
of greet-family, it will check to see if these 3 rerendered Components themselves need rerendering.
The test Reagent uses is a simple one: for each Component, are the newly supplied props different to
those supplied in the last render. Have they "changed"? <------******

"props flow from the parent. A Component can't get new props unless its parent rerenders."

but what if a child component listens to a ratom that its parents don't know about?
right, the page goes on to address that specific situation.

this page is real good

hm. it goes on to claim behavior that's counter to what i saw in mortgage, though - it sure looked to me
like passing my `state` ratom around was causing a bunch of rerenders, but this page claims it won't.

hm - i tried it myself, and confirmed the behavior that the page described.
so i guess the issue *wasn't* that i was passing ratoms around - it was that i was passing `selected-mortgage`
to `draw-bar`, rather than passing `is-selected-mortgage`. makes sense.

so why am i seeing such bad performance in that project?

reading through the reagent project's github issues now

interesting ones:
https://github.com/reagent-project/reagent/issues/212
https://github.com/reagent-project/reagent/issues/209
https://www.reddit.com/r/Clojure/comments/3vk58p/a_rant_on_om_next/

"No the problem is, you have to deref all ratoms on every render (or at least the first render).
Let's say you always want info from atom A and sometimes from B. If you don't deref B during the
first render call, it will never be linked, and therefore if it is changed later on it will have
no effect on the component in question."

interesting!

TODO read http://hoplon.io/
TODO look into om/next

====


2/20/16

http://www.mattgreer.org/articles/a-game-made-with-reagent/ talks about using css animations; TODO

https://rafalcieslak.svbtle.com/9-tips-for-clojurescript-beginners has a few good links
mentions checkout dependencies

======

2/21/16

https://developer.mozilla.org/en-US/docs/Games/Techniques/Efficient_animation_for_web_games
****** this article appears to be super good
has tips on how to avoid drawing things multiple times per frame (which would be a waste)
mentions https://github.com/BernieSumption/animator.js which is super old
cf http://blog.berniesumption.com/software/animator/
" For a modern library that exposes CSS animations through a similar API, I recommend jQuery.Transit."
so maybe the mdn article above is real out of date?

https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame

anyway tbh i think i should probably be using canvas instead of svg for a bullet-hell shooter/rpg
i think reagent+svg/divs/whatever makes tons of sense for turn-based games like cljstone
but for a boi clone, it really seems like square peg round hole

css/svg/etc animation links for later if i end up wanting them:
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions

anyway overall it looks like css transformations/animations are useful for situations where, like,
you've got a particular UI that you want to animate - but i don't think they're at all relevant for
a game in a web browser, it just doesn't make any sense

re: reagent and canvas (already expected these two wouldn't work together):
https://www.reddit.com/r/Clojure/comments/3cq5hg/can_reagent_components_work_with_html_canvas/
"No, and I've tried: https://github.com/gzmask/embodier-gcode-webgl"


canvas resources:
https://github.com/rm-hull/monet [seems abandoned; TODO read anyway, might have good ideas]

core.async and keyboard events: https://github.com/bdrillard/async-key-events

had trouble getting access to goog.events.KeyCodes, was given
http://clojurescriptmadeeasy.com/blog/when-do-i-use-require-vs-import.html in slack

TODO what the hell is an entity component system
https://github.com/markmandel/brute
https://github.com/muhuk/clecs
https://github.com/weavejester/ittyon

TODO what is http://wercker.com/

http://hueypetersen.com/posts/2016/02/13/om-next-from-a-relay-graphql-perspective/
incomprehensible om.next/relay/redux/graphql post

https://eklitzke.org/effectively-using-bash-profile evan notes on .bash_profile vs .bashrc

http://hueypetersen.com/posts/2013/08/02/the-state-machines-of-core-async/ core.async implementation
http://hueypetersen.com/posts/2013/07/10/code-read-of-core-async-timeouts/ also good post on timeout!

http://hueypetersen.com/posts/2013/06/17/angular_is_slow/ - unrelated, but good quote:
"Your model is not your view model. It can be for simple cases, but as soon as you start feeling
friction you want to let the view model evolve instead of changing your domain models to suit the view."
****** gold stuff

ok so what is https://github.com/pedestal/pedestal
i remember this being announced at clojure/west a while back but don't know anything about it
lol "Our primary focus for the near future is Pedestal documentation, sample applications and
improving general ease of use."
so i think i can be forgiven for closing this tab and checking back later
https://github.com/pedestal/pedestal/tree/master/guides/documentation for the record

edmund says to use https://github.com/edmund-huber/sssgen for my blog
i'm sure he's not biased

https://en.wikipedia.org/wiki/Entity_component_system - see "game example" section
really good info
one of the main touted advantages is "composability instead of inheritance" - so is ECS still relevant in cljs?
the description of components sounds a lot like clj/s protocols

https://stackoverflow.com/questions/1901251/component-based-game-engine-design
the guy in that answer says use FRP instead of ECS

https://web.archive.org/web/20140719094839/http://www.altdev.co/2011/10/08/a-handful-of-components/
********* good shit
"The health component is probably the component that I re-use the most. Not just a health value that goes up
and down it also keeps track of invulnerability, regeneration and poison. It also looks after the entities
damage modifies with the following types currently supported Fire, Ice, Melee, Projectile, Magic and Crushing"

notes before i forget

what does game state end up looking like? do we end up adopting some ecs concepts and going with like

state: {:entities [Entity]}
Entity: {:id s/Int
         :components [Component]}

having an id helps for generating ^keys
what do rooms look like? are they some sort of, like, container components?
or do we have an :entities list and a :rooms list? the player's only in one room at a time if that's relevant

=======

2/22/16

https://www.youtube.com/watch?v=9sc8Pyc51uU
******* great talk on graphql / relay

https://github.com/devknoll/graphql-resources graphql links

https://www.youtube.com/watch?v=UoZyyo2Bwr8 talk on hoplon/javelin
difficult to tell how to reason about it with regard to reagent
he trashtalks the virtual dom for a while but i don't think all his criticisms apply
not a super big fan of the tone of this talk in general, the tech looks useful but not much different from reagent

reading https://github.com/evancz/elm-architecture-tutorial/

TODO for boi what will movement look like? does a player have a :bounding-box {x y width height} and a
:movement-state [:down :right]? that could work.

at some point i want to read the react dom-diffing code but i have 600 other tabs to process first

ok time for http://elm-lang.org/guide/reactivity
"Note: It is usually best to use signals as little as possible. When it comes to writing nice modular code,
you should primarily use normal functions and values. If you find yourself stuck with a signal of signals,
ask yourself “how can I model this explicitly with functions and values?”"

https://www.reddit.com/r/elm/comments/3s6lhb/learning_elm_vs_haskell_as_an_intro_to_functional/ elm vs haskell

interesting notes on virtual dom / diffing: https://gist.github.com/Raynos/8414846
http://calendar.perfplanet.com/2013/diff/

reading http://elm-lang.org/blog/blazing-fast-html
"Virtual DOM sounds pretty slow, right? Create a whole new scene on every frame? This technique is actually
widely used in the game industry and performs shockingly well for DOM updates when you use two relatively
simple techniques: diffing and laziness." *******

"game industry" phrase links to https://en.wikipedia.org/wiki/Scene_graph

https://pchiusano.github.io/2014-07-02/css-is-unnecessary.html advocates using a lang like elm instead of css
"A little reflection on the history of software reveals abstraction as the primary means by which humans
make increasingly complex software possible and comprehensible."

https://news.ycombinator.com/item?id=9797973 om rant thread


************
okokok here's what i want to build
bullet-hell, twin-stick, top-down, boi-style combat/gameplay (except tear height, fuck that)
boi-style items
diablo-style levels (randomly generated floors rather than rooms; hallways, forests, whatever)
simple RoR-style leveling (don't care about skill trees / talents, just want to avoid staying at base damage
  forever like you often do in BoI)

updated state sketch
state: {:entities [Entity]
        :mode (s/enum :menu :loading :normal :etc)}
Entity: {:id s/Int
         :type (s/enum :player :bullet :monster :wall :etc)
         :components [Component]}

************

elm architecture notes:
https://gist.github.com/evancz/2b2ba366cae1887fe621
talks about advantages of having a centralized home of application state - single source of truth


what does main game loop look like?

update-movers
calculate-collisions
update-health (? or does calculate-collisions do this? what does calculate-collisions do? add to a queue of
  unresolved collisions? something else?)
perform-attacks (player and monsters can have an :attacking state, with an :attacks-per-second or something)


bullets can't collide with other bullets
