2/13/16

ok, let's try doing a little perf demo/test to see how svg+reagent stuff works

ok uh let's try doing just a few squares that bounce around the screen

drawing pretty squares was pretty easy, haven't started making them bounce yet

=====

2/14/16

the performance on animating these squares hasn't been completely great - time to
add some console.logs to see if we're redrawing every square whenever one of them moves

=====

2/15/16

quick braindump
i want to understand why the mortgage UI has such bad performance, seems like the entire graph
is redrawn whenever a bar is highlighted
things i plan to do related to this problem:
* read reagent source code
* read react source code / API
* get rid of mouseover/mouseout event handlers in mortgage demo, see if performance/behavior is at all affected;
  just have some anonymous go-block toggle a bar selected/unselected every 2 seconds or whatever
* for curiosity's sake, build a demo (partially implemented atm) in cljs-sandbox that tests framerate of a bunch
  of moving squares bouncing around the screen
* implement some way of detecting+displaying framerate, per above

(mainly interested in performance of svg to see if i can use it for boi, and also just out of curiosity at this point)

====

2/16/16

ok crap i gotta learn about dot products and shit
currently i'm focused on figuring out how to get these boxes to bounce off walls correctly
relevant links:
https://stackoverflow.com/questions/573084/how-to-calculate-bounce-angle
https://en.wikipedia.org/wiki/Dot_product
https://gamedev.stackexchange.com/questions/23672/determine-resulting-angle-of-wall-collision
https://www.safaribooksonline.com/library/view/html5-canvas/9781449308032/ch05s02.html ********<--------

you know what, let's set aside this box demo for a bit and try making a minimal reproduction
of the perf issue i'm seeing on the mortgage thing.

start with a program that emits a few <p> tags or whatever, and verify that the only one that gets redrawn
is the one that's changed. then try the same thing with svg and <rect> tags.

ok, i did that and it really looks like only the relevant <p> and <rect> are recalculated+redrawn. what gives?
back to the mortgage repo, where i probably should have kept all this...

ok i was able to fix the mortgage draw-all-bars issue, but the perf there is still bad. o well
might come back to this later, reimplement the mortgage ui from scratch

====

2/17/16

reading through the docs on react before i start poring through reagent's source.
currently on https://facebook.github.io/react/docs/thinking-in-react.html

seems like react is primarily a library for expressing composable UI components that are defined in terms of
`this.props` and `this.state`, where `this.props` is static data passed in at initialization time, and `this.state`
is dynamic data that's a result of user behavior/interaction (eg adding a comment, clicking "refresh", whatever) -
and the main thing that react buys you is that whenever a component's `this.state` changes, the DOM will automatically +
performantly be updated to reflect that state change. so your JS code's state and your UI never fall out of sync
with one another.

they do this by making you use a this.setState() function, which presumably triggers all the efficient dom-diffing-etc
recalculation/redrawing of components and their children whenever their state changes.

unrelated, stumbled across this quote in https://etscrivner.github.io/posts/2014/10/building-large-flask-apps-in-the-real-world/
"""Organize by principle of least suprise. Ask yourself, "How would I organize this so that someone using Notepad
with a good grasp on the programming language would be able to find and edit any arbitrary component?""""

back to react - in https://facebook.github.io/react/docs/interactivity-and-dynamic-uis.html there's this extended treatise
on the difference between this.state and this.props

https://facebook.github.io/react/docs/multiple-components.html
"As discussed earlier, a component cannot mutate its props â€” they are always consistent with what its owner sets them to.
This fundamental invariant leads to UIs that are guaranteed to be consistent."

https://facebook.github.io/react/docs/reusable-components.html describes a way to enforce type constraints on your this.props -
primarily described as useful for when you're writing general reusable components (button or whatever) and want to make sure
that they're always used in the right way. neat!

looking forward to reading https://facebook.github.io/react/docs/working-with-the-browser.html#component-lifecycle , it's the
main article i was looking for, i wanted to know what the hell is up with didMount, willMount, etc etc

i wonder what reagent source will look like? also, what's a reaction?
i'd guess that (r/atom) adds a watch function to the returned atom, which calls this.setState() on something-or-other
i wonder how reagent uses props vs state?

ok, i was worried that there'd be a ton of will/did mount/etc terminology to learn, but the above component-lifecycle
link is really pretty straightforward.

...and that's it! reading these docs was easier than i thought, neat.

https://facebook.github.io/react/docs/animation.html - "an easy way to perform CSS transitions and animations
when a React component enters or leaves the DOM"

***** eep, here's an interesting tidbit from https://groups.google.com/forum/#!topic/reactjs/lZDjMmlTHOs
"The `key` attribute is similar as an `id` but it *doesn't have to be globally unique*. It must only be unique
among its siblings. Since `id` is already an existing concept in the DOM, we couldn't re-use the same name so we opted for `key`."
wasn't sure til now re: whether or not keys had to be globally unique, good to know.

======

2/18/16

setState() documented in https://facebook.github.io/react/docs/component-api.html
lol basically all of the methods documented on that page are deprecated / will be removed soon
interesting notes in isMounted() https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html

https://facebook.github.io/react/docs/component-specs.html has notes on why render() should be pure

writeup on their core abstraction and how they implemented it performantly at https://facebook.github.io/react/docs/reconciliation.html
****super super good article, goes into more depth about why the `key` thing is necessary

ok that's about it for the react docs' appendices!

let's see if i get anything out of reading through https://github.com/clojure/clojurescript/wiki/Quick-Start carefully
not much new, but it does have a section at the bottom that explains cljsjs

TODO - consider using a cljsjs package to generate charts in mortgage.git instead of doing them by hand

next up: read through reagent source code finally; still need to figure out what a reaction is

